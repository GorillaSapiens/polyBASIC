%{
   // C decls go here
#include <stdio.h>
#include <string.h>

#include "eprintf.hpp"
#include "rational.hpp"
#include "tree.hpp"
#include "dumptree.hpp"
#include "lex.yy.hpp"
#include "safe_strdup.hpp"

int remsleep = 0;
void yyerror(const char *s);

#define DEBUG

Tree *programtree;

void fixup_nested_if(Tree *t, Tree *n = NULL);

%}

%union {
   Tree *u;
}

%type <u> program
%type <u> line
%type <u> linelist

%type <u> name
%type <u> efad

%type <u> arraydim
%type <u> arraydimlist

%type <u> constant
%type <u> negconstant
%type <u> posconstant
%type <u> signedconstant

%type <u> dconst
%type <u> iconst
%type <u> rconst
%type <u> sconst
%type <u> vconst

%type <u> expression
%type <u> exprlist

%type <u> label
%type <u> labellist

%type <u> cstmt
%type <u> istmt
%type <u> stmtlist

%type <u> inputstmt
%type <u> readstmt
%type <u> restorestmt
%type <u> datastmt
%type <u> datalist

%type <u> printstmt
%type <u> printlist

%type <u> repeatstmt
%type <u> controlstmt
%type <u> ifstmtlist
%type <u> optionbase
%type <u> dimstmt
%type <u> remstmt

%type <u> assignstmt

%type <u> relation

%type <u> defstmt
%type <u> paramlist

%locations

/* reserved words */
%token YYBASE
%token YYDATA
%token YYDEF
%token YYDIM

%token YYNAME

%token YYEND
%token YYFOR
%token YYGOSUB
%token YYGOTO
%token YYIF
%token YYTHEN
%token YYIFGOTO
%token YYIFGOSUB
%token YYIFSTMTLIST
%token YYINPUT
%token YYLET
%token YYNEXT
%token YYON
%token YYOPTION
%token YYPRINT
%token YYREAD
%token YYREM
%token YYRESTORE
%token YYRETURN
%token YYSTEP
%token YYSTOP
%token YYTO

%token YYDOUBLE
%token YYSTRING
%token YYINTEGER
%token YYRATIONAL
%token YYVOID // for testing

%token YYRELATION
%token YYASSIGN
%token YYEFAD
%token YYLVAL

%token YYIPSEP

%token YYLABEL
%token YYEOL

%left '&'
%left '+'
%left '-'
%left '*'
%left '/'
%left '^'
%right UPLUSMINUS

%%

program        : linelist
                  {
                     // mischief managed!
                     $$ = $1;
                     programtree = $$;

                     fixup_nested_if($$);
                  }
               ;

linelist       : line
                  {
                     $$ = $1;
                  }
               | linelist line
                  {
                     $$ = $1;
                     Tree *node = $$;
                     while (node->next) {
                        node = node->next;
                     }
                     node->next = $2;
                  }
               ;

line           : YYEOL
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYREM;
                  }
               | stmtlist YYEOL
                  {
                     $$ = $1;
                     $$->label = NULL;
                  }
               | label stmtlist YYEOL
                  {
                     $$ = $2;
                     $$->label = strdup(V_AS_S($1->value));
                  }
               | remstmt error YYEOL
                  {
                     $$ = $1;
                     yyerrok;
                     remsleep = 0;
                  }
               | label remstmt error YYEOL
                  {
                     $$ = $2;
                     $$->label = strdup(V_AS_S($1->value));
                     yyerrok;
                     remsleep = 0;
                  }
               ;

remstmt        : YYREM
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYREM;
                     remsleep = 1;
                  }
               ;

stmtlist       : cstmt ':' stmtlist
                  {
                     $$ = $1;
                     $$->next = ($3);
                  }
               | cstmt
                  {
                     $$ = $1;
                  }
               | istmt
                  {
                     $$ = $1;
                  }
               ;

istmt          : ifstmtlist
                  {
                     $$=$1;
                  }
               ;

cstmt          : assignstmt
                  {
                     $$ = $1;
                  }
               | controlstmt
                  {
                     $$ = $1;
                  }
               | datastmt
                  {
                     $$ = $1;
                  }
               | repeatstmt
                  {
                     $$ = $1;
                  }
               | printstmt
                  {
                     $$ = $1;
                  }
               | inputstmt
                  {
                     $$ = $1;
                  }
               | readstmt
                  {
                     $$ = $1;
                  }
               | restorestmt
                  {
                     $$ = $1;
                  }
               | optionbase
                  {
                     $$ = $1;
                  }
               | dimstmt
                  {
                     $$ = $1;
                  }
               | defstmt
                  {
                     $$ = $1;
                  }
               ;

defstmt        : YYDEF name '(' paramlist ')' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDEF;
                     $$->value.base() = strdup(V_AS_S($2->value));
                     $$->left = ($4);
                     $$->right = ($6);
                  }
               | YYDEF name '(' paramlist ')' '=' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDEF;
                     $$->value.base() = strdup(V_AS_S($2->value));
                     $$->left = ($4);
                     $$->right = ($7);
                  }
               | YYDEF name '(' ')' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDEF;
                     $$->value.base() = strdup(V_AS_S($2->value));
                     $$->left = NULL;
                     $$->right = ($5);
                  }
               | YYDEF name '(' ')' '=' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDEF;
                     $$->value.base() = strdup(V_AS_S($2->value));
                     $$->left = NULL;
                     $$->right = ($6);
                  }
               ;

paramlist      : paramlist YYIPSEP name
                  {
                     $$ = $1;
                     Tree *node = $$;
                     while (node->middle) {
                        node = node->middle;
                     }
                     node->middle = ($3);
                  }
               | name
                  {
                     $$ = $1;
                  }
               ;

optionbase     : YYOPTION YYBASE iconst
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYBASE;
                     $$->value.base() = V_AS_I($3->value);
                  }
               ;

dimstmt        : YYDIM arraydimlist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDIM;
                     $$->right = ($2);
                  }
               ;

arraydimlist   : arraydimlist YYIPSEP arraydim
                  {
                     $$ = $1;
                     Tree *node = $$;
                     while (node->middle) {
                        node = node->middle;
                     }
                     node->middle = ($3);
                  }
               | arraydim
                  {
                     $$ = $1;
                  }
               ;

datastmt       : YYDATA datalist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDATA;
                     $$->right = ($2);
                  }
               ;

restorestmt    : YYRESTORE
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRESTORE;
                  }
               ;

readstmt       : YYREAD exprlist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYREAD;
                     $$->right = ($2);
                  }
               ;

printstmt      : YYPRINT printlist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYPRINT;
                     if ($2 && $2->op != YYEOF) {
                        $$->middle = ($2);
                     }
                  }
               ;

ifstmtlist     : YYIF expression relation expression YYTHEN stmtlist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYIFSTMTLIST;
                     $$->value.base() = strdup(V_AS_S($3->value));
                     $$->left = ($2);
                     $$->middle = ($6);
                     $$->right = ($4);
                  }
               ;

controlstmt    : YYGOTO label
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYGOTO;
                     $$->value.base() = strdup(V_AS_S($2->value));
                  }
               | YYGOSUB label
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYGOSUB;
                     $$->value.base() = strdup(V_AS_S($2->value));
                  }
               | YYIF expression relation expression YYTHEN label
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYIFGOTO;
                     $$->value.base() = strdup(V_AS_S($3->value));
                     $$->left = ($2);
                     $$->middle = ($6);
                     $$->right = ($4);
                  }
               | YYIF expression relation expression YYGOTO label
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYIFGOTO;
                     $$->value.base() = strdup(V_AS_S($3->value));
                     $$->left = ($2);
                     $$->middle = ($6);
                     $$->right = ($4);
                  }
               | YYIF expression relation expression YYGOSUB label
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYIFGOSUB;
                     $$->value.base() = strdup(V_AS_S($3->value));
                     $$->left = ($2);
                     $$->middle = ($6);
                     $$->right = ($4);
                  }
               | YYON expression YYGOTO labellist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYON;
                     $$->value.base() = 0;
                     $$->left = ($2);
                     $$->right = ($4);
                  }
               | YYON expression YYGOSUB labellist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYON;
                     $$->value.base() = 1;
                     $$->left = ($2);
                     $$->right = ($4);
                  }
               | YYRETURN
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRETURN;
                  }
               | YYSTOP
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYSTOP;
                  }
               | YYEND
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYEND;
                  }
               ;

relation       : YYRELATION
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRELATION;
                     $$->value.base() = strdup(yytext);
                  }
               | '<'
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRELATION;
                     $$->value.base() = strdup("<");
                  }
               | '>'
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRELATION;
                     $$->value.base() = strdup(">");
                  }
               | '='
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRELATION;
                     $$->value.base() = strdup("=");
                  }
               ;

repeatstmt     : YYFOR name '=' expression YYTO expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYFOR;
                     $$->value.base() = strdup(V_AS_S($2->value));
                     $$->left = ($4);
                     $$->right = ($6);
                     $$->middle = NULL;
                  }
               | YYFOR name '=' expression YYTO expression YYSTEP expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYFOR;
                     $$->value.base() = strdup(V_AS_S($2->value));
                     $$->left = ($4);
                     $$->right = ($6);
                     $$->middle = ($8);
                  }
               | YYNEXT name
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYNEXT;
                     $$->value.base() = strdup(V_AS_S($2->value));
                  }
               ;

label          : name
                  {
                     $$ = $1;
                     $$->op = YYLABEL;
                  }
               | YYINTEGER
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYLABEL;
                     $$->value.base() = strdup(yytext);
                  }
               ;

labellist      : label
                  {
                     $$ = $1;
                  }
               | label YYIPSEP labellist
                  {
                     $$ = $1;
                     $$->middle = ($3);
                  }
               ;

name           : YYNAME
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYNAME;
                     $$->value.base() = strdup(yytext);
                  }
               ;

arraydim       : name '(' iconst ')'
                  {
                     $$ = $1;
                     $$->op = YYDIM;
                     $$->left = ($3);
                     $$->right = NULL;
                  }
               | name '(' iconst YYIPSEP iconst ')'
                  {
                     $$ = $1;
                     $$->op = YYDIM;
                     $$->left = ($3);
                     $$->right = ($5);
                  }
               ;

constant       : dconst
                  {
                     $$ = $1;
                  }
               | iconst
                  {
                     $$ = $1;
                  }
               | rconst
                  {
                     $$ = $1;
                  }
               | sconst
                  {
                     $$ = $1;
                  }
               | vconst
                  {
                     $$ = $1;
                  }
               ;

negconstant    : '-' dconst
                  {
                     $$ = $2;
                     $$->value.base() = - V_AS_D($$->value);
                  }
               | '-' iconst
                  {
                     $$ = $2;
                     $$->value.base() = - V_AS_I($$->value);
                  }
               | '-' rconst
                  {
                     $$ = $2;
                     Rational *rval = new Rational(- *(V_AS_R($$->value)));
                     $$->value.vacate();
                     $$->value.base() = rval;
                  }
               ;

posconstant    : '+' dconst
                  {
                     $$ = $2;
                  }
               | '+' iconst
                  {
                     $$ = $2;
                  }
               | '+' rconst
                  {
                     $$ = $2;
                  }
               ;

datalist       : signedconstant YYIPSEP datalist
                  {
                     $$ = $1;
                     $$->middle = ($3);
                  }
               | signedconstant
                  {
                     $$ = $1;
                  }
               ;

signedconstant : constant
                  {
                     $$ = $1;
                  }
               | negconstant
                  {
                     $$ = $1;
                  }
               | posconstant
                  {
                     $$ = $1;
                  }
               ;

expression     : '+' expression %prec UPLUSMINUS
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '+';
                     $$->left = NULL;
                     $$->right = ($2);
                  }
               | '-' expression %prec UPLUSMINUS
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '-';
                     $$->left = NULL;
                     $$->right = ($2);
                  }
               | expression '&' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '&';
                     $$->left = ($1);
                     $$->right = ($3);
                  }
               | expression '+' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '+';
                     $$->left = ($1);
                     $$->right = ($3);
                  }
               | expression '-' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '-';
                     $$->left = ($1);
                     $$->right = ($3);
                  }
               | expression '*' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '*';
                     $$->left = ($1);
                     $$->right = ($3);
                  }
               | expression '/' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '/';
                     $$->left = ($1);
                     $$->right = ($3);
                  }
               | expression '^' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = '^';
                     $$->left = ($1);
                     $$->right = ($3);
                  }
               | '(' expression ')'
                  {
                     $$ = $2;
                  }
               | efad
                  {
                     $$ = $1;
                  }
               | constant
                  {
                     $$ = $1;
                  }
               ;

efad           : name
                  {
                     $$ = $1;
                     $$->op = YYEFAD;
                  }
               | name '(' ')'
                  {
                     $$ = $1;
                     $$->op = YYEFAD;
                  }
               | name '(' exprlist ')'
                  {
                     $$ = $1;
                     $$->op = YYEFAD;
                     $$->right = ($3);
                  }
               ;

exprlist       : exprlist YYIPSEP expression
                  {
                     $$ = $1;
                     Tree *node = $$;
                     while (node->middle) {
                        node = node->middle;
                     }
                     node->middle = ($3);
                  }
               | expression
                  {
                     $$ = $1;
                  }
               ;

printlist      : expression YYIPSEP printlist
                  {
                     $$ = $1;
                     if ($3 && $3->op == YYEOF) {
                        $$->middle = NULL;
                     }
                     else {
                        $$->middle = ($3);
                     }
                  }
               | expression
                  {
                     $$ = $1;
                  }
               | %empty
                  {
                     $$ = NULL;
                  }
               ;

inputstmt      : YYINPUT exprlist
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYINPUT;
                     $$->right = ($2);
                  }
               ;

assignstmt     : efad '=' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYASSIGN;
                     $$->value.base() = V_AS_S($1->value);
                     $$->left = ($1);
                     $$->left->op = YYLVAL;
                     $$->right = ($3);
                  }
               | YYLET efad '=' expression
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYASSIGN;
                     $$->value.base() = V_AS_S($2->value);
                     $$->left = ($2);
                     $$->left->op = YYLVAL;
                     $$->right = ($4);
                  }
               ;

dconst         : YYDOUBLE
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYDOUBLE;
                     $$->value.base() = atof(yytext);
                  }
               ;

vconst         : YYVOID
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYVOID;
                     $$->value.base() = (char) 0;
                  }
               ;

iconst         : YYINTEGER
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYINTEGER;
                     $$->value.base() = atoll(yytext);
                  }
               ;

rconst         : YYRATIONAL
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYRATIONAL;
                     $$->value.base() = new Rational(yytext);
                  }
               ;

sconst         : YYSTRING
                  {
                     $$ = new Tree();
                     $$->line = yylineno;
                     $$->col = yyloc.first_column;
                     $$->op = YYSTRING;
                     char *buffer = (char *)alloca(strlen(yytext + 1));
                     char *q = buffer;
                     char *s = yytext + 1;
                     while(*s) {
                        if (*s == '\\') {
                           s++;
                        }
                        *q++ = *s++;
                     }
                     q[-1] = 0;
                     $$->value.base() = strdup(buffer);
                  }
               ;
%%

void fixup_nested_if(Tree *t, Tree *n) {
   while (t) {
      if (t->op == YYIFSTMTLIST) {
         fixup_nested_if(t->middle, t->next ? t->next : n);
      }
      if (t->next) {
         t = t->next;
      }
      else {
         if (n != NULL) {
            t->next = n;
         }
         t = NULL;
      }
   }
}

void yyerror(const char *s) {
   if (!remsleep) {
      if (!strcmp(s, "syntax error")) {
         eprintf("{SYNTAX ERROR} @%0:%1 ❮%2❯%n",
            yylineno, yylloc.first_column, (yytext[0] < ' ') ? "EOL" : yytext);
      }
      else {
         eprintf("{ERROR} @%0:%1 ❮%2❯ ❮%3❯%n",
            yylineno, yylloc.first_column, s, yytext);
      }
   }
}

