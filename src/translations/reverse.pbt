####
# autotranslation for the "reverse" language
####
#
# THIS FILE WAS AUTOMATICALLY GENERATED
#
# this file was autogenerated from google translate there are bound to
# be problems, mistranslations, and cultural problems
#
# it is our sincerest hope that these will be corrected by the community
# over time
#
# we kindly ask for your patience, and any contributions you may wish
# to make
#
# the dev team is not fluent in these languages, and no actual offense
# is intended
#
# obviously, many of these can be shortened.  to do so properly would
# take a fluent language speaker who is also familiar with the BASIC
# programming language
#
# this file should be utf8
#
# entries on the left are the actual BASIC keywords
#
# entries on the right are the native versions of those keywords
#
# blank lines are allowed

[keywords]

# from ECMA-55 §5.2

END <= DNE          # the end statement

# from ECMA-55 §9

ABS <= SBA          # the absolute value function
ATN <= NTA          # the trigonomic arctangent function
COS <= SOC          # the trigonomic cosine function
EXP <= PXE          # the exponential / power function
INT <= TNI          # the integer / floor function
LOG <= GOL          # the natural log function
RND <= DNR          # generate random number
SGN <= NGS          # determine the sign
SIN <= NIS          # the trigonomic sine function
SQR <= RQS          # the square root function
TAN <= NAT          # the trigonomic tangent function
DBL <= LBD          # convert to double
STR <= RTS          # convert to string
RAT <= TAR          # convert to rational

# from ECMA-55 §10

DEF <= FED          # for user defined functions

# from ECMA-55 §11

LET <= TEL          # for variable assignment

# from ECMA-55 §12
# NB: ECMA-55 has no ELSE statement

GO <= OG            # part of the GOTO and GOSUB
GOSUB <= BUSOG      # formed from GO and SUB if no direct translation exists
GOTO <= OTOG        # formed from GO and TO if no direct translation exists
TO <= OT            # part of for/to/step/next constructs
IF <= FI            # part of if/then constructs
THEN <= NEHT        # part of if/then constructs
SUB <= BUS          # beware, used as part of "go sub"
ON <= NO            # a sort of a switch statement
RETURN <= NRUTER    # used to exit a subroutine
STOP <= POTS        # command to stop execution

# from ECMA-55 §13
# NB: translation for TO is in §12

FOR <= ROF          # part of for/to/step/next constructs
STEP <= PETS        # part of for/to/step/next constructs
NEXT <= TXEN        # part of for/to/step/next constructs

# from ECMA-55 §14

PRINT <= TNIRP      # to print things out

# from ECMA-55 §15

INPUT <= TUPNI      # the input statement

# from ECMA-55 §16

READ <= DAER        # part of read / restore
RESTORE <= EROTSER  # part of read / restore

# from ECMA-55 §17

DATA <= ATAD        # to embed data in the program

# from ECMA-55 §18

DIM <= MID          # dimension arrays
OPTION <= NOITPO    # see ECMA-55 §18.1
BASE <= ESAB        # see ECMA-55 §18.1

# from ECMA-55 §19

REM <= MER          # see ECMA-55 §18.1

# from ECMA-55 §20

RANDOMIZE <= EZIMODNAR

#### end of ECMA-55 defined constants
#
# it is worth noting that the following constants,
# while they may appear in other versions of BASIC,
# do NOT appear in ECMA-55:
#
# LOOP <= POOL  # designed to evoke an error for testing

[errors]
AND NO LANGUAGE GIVEN ON COMMAND LINE.  EXITING.	.GNITIXE  .ENIL DNAMMOC NO NEVIG EGAUGNAL ON DNA
ARRAY ALREADY DEFINED	DENIFED YDAERLA YARRA
ARRAY INDEX OUTSIDE OF BOUNDS	SDNUOB FO EDISTUO XEDNI YARRA
CANNOT ACCESS DIRECTORY	YROTCERID SSECCA TONNAC
DATA INPUT UNDERFLOW	WOLFREDNU TUPNI ATAD
DATA READ UNDERFLOW	WOLFREDNU DAER ATAD
DEFINITION CYCLE DISCOVERED	DEREVOCSID ELCYC NOITINIFED
ERROR	RORRE
FOR VARIABLE MULTIPLY DEFINED	DENIFED YLPITLUM ELBAIRAV ROF
FUNCTION DEFINITION MULTIPLY DEFINED	DENIFED YLPITLUM NOITINIFED NOITCNUF
FUNCTION DEFINITION PARAMETER MISMATCH	HCTAMSIM RETEMARAP NOITINIFED NOITCNUF
GOSUB STACK OVERFLOW	WOLFREVO KCATS BUSOG
GOSUB STACK UNDERFLOW	WOLFREDNU KCATS BUSOG
INDEX OUT OF RANGE	EGNAR FO TUO XEDNI
LABEL ALREADY DEFINED	DENIFED YDAERLA LEBAL
LEFT / RIGHT OPERATION MISMATCH	HCTAMSIM NOITAREPO THGIR / TFEL
NEGATIVE INDEX	XEDNI EVITAGEN
NEXT ON FOR LOOP WITH STRING VARIABLE	ELBAIRAV GNIRTS HTIW POOL ROF NO TXEN
OPERAND MISMATCH	HCTAMSIM DNAREPO
OPTION REQUIRES A LANGUAGE	EGAUGNAL A SERIUQER NOITPO
PLEASE CHECK LANGUAGE SETTINGS OR ENVIRONMENT VARIABLE	ELBAIRAV TNEMNORIVNE RO SGNITTES EGAUGNAL KCEHC ESAELP
STRING MATH LOGIC ERROR	RORRE CIGOL HTAM GNIRTS
UNABLE TO OPEN FILE	ELIF NEPO OT ELBANU
UNABLE TO OPEN TO OPEN FILE FOR READING	GNIDAER ROF ELIF NEPO OT NEPO OT ELBANU
UNDEFINED LABEL	LEBAL DENIFEDNU
UNHANDLED OPERATION	NOITAREPO DELDNAHNU
UNHANDLED OPERATION CODE	EDOC NOITAREPO DELDNAHNU
UNKNOWN IF LABEL	LEBAL FI NWONKNU
UNRECOGNIZED DOUBLE MATH OPERATION	NOITAREPO HTAM ELBUOD DEZINGOCERNU
UNRECOGNIZED FUNCTION FUNCTION DEFINITION	NOITINIFED NOITCNUF NOITCNUF DEZINGOCERNU
UNRECOGNIZED GOSUB LABEL	LEBAL BUSOG DEZINGOCERNU
UNRECOGNIZED GOTO LABEL	LEBAL OTOG DEZINGOCERNU
UNRECOGNIZED INPUT	TUPNI DEZINGOCERNU
UNRECOGNIZED INTEGER MATH OPERATION	NOITAREPO HTAM REGETNI DEZINGOCERNU
UNRECOGNIZED MATH TYPE	EPYT HTAM DEZINGOCERNU
UNRECOGNIZED NEXT VARIABLE	ELBAIRAV TXEN DEZINGOCERNU
UNRECOGNIZED OP IN PRINT	TNIRP NI PO DEZINGOCERNU
UNRECOGNIZED RATIONAL MATH OPERATION	NOITAREPO HTAM LANOITAR DEZINGOCERNU
UNRECOGNIZED VARIABLE TYPE	EPYT ELBAIRAV DEZINGOCERNU
UNSET ENVIRONMENT VARIABLE	ELBAIRAV TNEMNORIVNE TESNU
VARIABLE / ARRAY DEFINITION MISMATCH	HCTAMSIM NOITINIFED YARRA / ELBAIRAV
VARIABLE DEFINED AS ARRAY	YARRA SA DENIFED ELBAIRAV
VARIABLE DEFINED AS NONARRAY	YARRANON SA DENIFED ELBAIRAV
VARIABLE HAS NO VALUE	EULAV ON SAH ELBAIRAV
VARIABLE IS NOT AN ARRAY	YARRA NA TON SI ELBAIRAV
